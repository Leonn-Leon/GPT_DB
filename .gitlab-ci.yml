---
stages:
  #- set_python_version
  #- check_dependencies
  #- cleanup
  - build
  
variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  POETRY_VERSION: 2.1.1
  HTTP_PROXY: http://vproxy2.spk.ru:3128
  HTTPS_PROXY: http://vproxy2.spk.ru:3128
  NO_PROXY: localhost,127.0.0.1
  
  
setup_python_version:
  stage: set_python_version
  image: alpine:latest
  script:
    - if [ ! -f .python-version ]; then echo "File .python-version not found";
      exit 1; fi
    - PYTHON_VERSION=$(cat .python-version)
    - echo "PYTHON_VERSION=$PYTHON_VERSION" > python-version.env
  artifacts:
    reports:
      dotenv: python-version.env
      
      
check_dependencies:
  stage: check_dependencies
  image: python:$PYTHON_VERSION-slim
  needs:
    - job: setup_python_version
  cache:
    key: poetry-$CI_COMMIT_REF_NAME
    paths:
      - .venv/
      - poetry.lock
      - pyproject.toml
  before_script:
    - export HTTP_PROXY=$HTTP_PROXY
    - export HTTPS_PROXY=$HTTPS_PROXY
    - export NO_PROXY=$NO_PROXY
    - pip install poetry==$POETRY_VERSION
    - poetry config virtualenvs.in-project true
    - poetry install --only main
  script:
    - poetry check
    - poetry show --tree
    - poetry list
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'

    
    
cleanup:
  stage: cleanup
  script:
    - rm -rf .venv
    - rm poetry.lock
    - rm pyproject.toml
  when: always
  needs:
    - job: check_dependencies
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
    

docker-build:
  stage: build
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375 
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:dind
      alias: docker
      command: ["--tls=false"]
    - docker:dind
  before_script:
   - echo $CI_REGISTRY
   - docker login -u $CI_TKN_LN -p $CI_TKN_PW $CI_REGISTRY
   - export HTTP_PROXY=$HTTP_PROXY
   - export HTTPS_PROXY=$HTTPS_PROXY
   - export NO_PROXY=$NO_PROXY
  script:
    - docker logout
    #- docker build --pull --build-arg HTTP_PROXY=$SHTTP_PROXY --build-arg HTTPS_PROXY=$SHTTPS_PROXY -t $TAG_LATEST . 
    - docker build --pull -t $TAG_LATEST . 
    - docker login -u $CI_TKN_LN -p $CI_TKN_PW $CI_REGISTRY
    - docker images
    - echo $DOCKER_IMAGE_NAME 
    - echo $CI_REGISTRY_IMAGE:latest
    - docker tag $TAG_LATEST $CI_REGISTRY_IMAGE/master:latest
    - docker push $TAG_LATEST


    
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == 'dev'
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'master'
    - if: $CI_COMMIT_BRANCH == 'master'
